/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2023 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */

  export type language_enum = 'de' | 'en' | 'es' | 'fr' | 'it' | 'ja' | 'ko' | 'pt' | 'ru' | 'zh';
  export namespace every {
    export type language_enum = ['de', 'en', 'es', 'fr', 'it', 'ja', 'ko', 'pt', 'ru', 'zh'];
  }

  /* --- tables --- */

  /**
   * **greetings**
   * - Table in database
   */
  export namespace greetings {
    export type Table = 'greetings';
    export interface Selectable {
      /**
      * **greetings.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: Date;
      /**
      * **greetings.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **greetings.greeting**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      greeting: string;
      /**
      * **greetings.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('greetings_id_seq'::regclass)`
      */
      id: number;
      /**
      * **greetings.language**
      * - `language_enum` in database
      * - `NOT NULL`, no default
      */
      language: language_enum;
    }
    export interface JSONSelectable {
      /**
      * **greetings.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at: db.TimestampString;
      /**
      * **greetings.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **greetings.greeting**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      greeting: string;
      /**
      * **greetings.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('greetings_id_seq'::regclass)`
      */
      id: number;
      /**
      * **greetings.language**
      * - `language_enum` in database
      * - `NOT NULL`, no default
      */
      language: language_enum;
    }
    export interface Whereable {
      /**
      * **greetings.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **greetings.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **greetings.greeting**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      greeting?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **greetings.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('greetings_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **greetings.language**
      * - `language_enum` in database
      * - `NOT NULL`, no default
      */
      language?: language_enum | db.Parameter<language_enum> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, language_enum | db.Parameter<language_enum> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **greetings.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **greetings.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **greetings.greeting**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      greeting: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **greetings.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('greetings_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **greetings.language**
      * - `language_enum` in database
      * - `NOT NULL`, no default
      */
      language: language_enum | db.Parameter<language_enum> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **greetings.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `now()`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **greetings.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **greetings.greeting**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      greeting?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **greetings.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('greetings_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **greetings.language**
      * - `language_enum` in database
      * - `NOT NULL`, no default
      */
      language?: language_enum | db.Parameter<language_enum> | db.SQLFragment | db.SQLFragment<any, language_enum | db.Parameter<language_enum> | db.SQLFragment>;
    }
    export type UniqueIndex = 'greetings_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **pgmigrations**
   * - Table in database
   */
  export namespace pgmigrations {
    export type Table = 'pgmigrations';
    export interface Selectable {
      /**
      * **pgmigrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('pgmigrations_id_seq'::regclass)`
      */
      id: number;
      /**
      * **pgmigrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **pgmigrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on: Date;
    }
    export interface JSONSelectable {
      /**
      * **pgmigrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('pgmigrations_id_seq'::regclass)`
      */
      id: number;
      /**
      * **pgmigrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **pgmigrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on: db.TimestampString;
    }
    export interface Whereable {
      /**
      * **pgmigrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('pgmigrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pgmigrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pgmigrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **pgmigrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('pgmigrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **pgmigrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **pgmigrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **pgmigrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('pgmigrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **pgmigrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **pgmigrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'pgmigrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **test**
   * - Table in database
   */
  export namespace test {
    export type Table = 'test';
    export interface Selectable {
      /**
      * **test.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('test_id_seq'::regclass)`
      */
      id: number;
      /**
      * **test.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **test.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('test_id_seq'::regclass)`
      */
      id: number;
      /**
      * **test.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **test.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('test_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **test.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **test.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('test_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **test.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **test.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('test_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **test.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'test_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = greetings.Table | pgmigrations.Table | test.Table;
    export type Selectable = greetings.Selectable | pgmigrations.Selectable | test.Selectable;
    export type JSONSelectable = greetings.JSONSelectable | pgmigrations.JSONSelectable | test.JSONSelectable;
    export type Whereable = greetings.Whereable | pgmigrations.Whereable | test.Whereable;
    export type Insertable = greetings.Insertable | pgmigrations.Insertable | test.Insertable;
    export type Updatable = greetings.Updatable | pgmigrations.Updatable | test.Updatable;
    export type UniqueIndex = greetings.UniqueIndex | pgmigrations.UniqueIndex | test.UniqueIndex;
    export type Column = greetings.Column | pgmigrations.Column | test.Column;
  
    export type AllBaseTables = [greetings.Table, pgmigrations.Table, test.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [greetings.Table, pgmigrations.Table, test.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'public';
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ['public'];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "greetings": greetings.Selectable;
    "pgmigrations": pgmigrations.Selectable;
    "test": test.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "greetings": greetings.JSONSelectable;
    "pgmigrations": pgmigrations.JSONSelectable;
    "test": test.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "greetings": greetings.Whereable;
    "pgmigrations": pgmigrations.Whereable;
    "test": test.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "greetings": greetings.Insertable;
    "pgmigrations": pgmigrations.Insertable;
    "test": test.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "greetings": greetings.Updatable;
    "pgmigrations": pgmigrations.Updatable;
    "test": test.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "greetings": greetings.UniqueIndex;
    "pgmigrations": pgmigrations.UniqueIndex;
    "test": test.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "greetings": greetings.Column;
    "pgmigrations": pgmigrations.Column;
    "test": test.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "greetings": greetings.SQL;
    "pgmigrations": pgmigrations.SQL;
    "test": test.SQL;
  }[T];

}
